# GitHub .github/workflows/terraform.yml
name: Terraform

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Select the Terraform action'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy

permissions:
  contents: write

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.8.3
          terraform_wrapper: false

      # Step 3: Set up Yandex Cloud service account key
      - name: Set up Yandex Cloud service account key
        working-directory: ./infra
        run: |
          echo "${{ secrets.YC_KEY_JSON }}" | base64 -d > ./authorized_key.json

      # Step 4: Initialize Terraform
      - name: Initialize Terraform
        working-directory: ./infra
        run: terraform init -backend-config="access_key=${{ secrets.ACCESS_KEY }}" -backend-config="secret_key=${{ secrets.SECRET_KEY }}"
        env:
          ACCESS_KEY: ${{ secrets.ACCESS_KEY }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}

      # Step 5: Run Terraform Plan
      - name: Terraform Plan
        working-directory: ./infra
        if: ${{ github.event.inputs.action == 'plan' }}
        run: terraform plan
        env:
          TF_VAR_cloud_id: ${{ secrets.YC_CLOUD_ID }}
          TF_VAR_folder_id: ${{ secrets.YC_FOLDER_ID }}
          TF_VAR_ssh_key_pub: ${{ secrets.SSH_KEY_PUB }}


      # Step 6: Run Terraform Apply
      - name: Terraform Apply
        working-directory: ./infra
        if: ${{ github.event.inputs.action == 'apply' }}
        run: terraform apply -auto-approve
        env:
          TF_VAR_cloud_id: ${{ secrets.YC_CLOUD_ID }}
          TF_VAR_folder_id: ${{ secrets.YC_FOLDER_ID }}
          TF_VAR_ssh_keykey_pub: ${{ secrets.SSH_KEY_PUB }}

      # Step 7: Save External IP
      - name: Save External IP
        working-directory: ./infra
        if: ${{ github.event.inputs.action == 'apply' }}
        run: |
          EXTERNAL_IP=$(terraform output -raw external_ip)
          if [ -n "$EXTERNAL_IP" ]; then
            echo "VM_ADDRESS=$EXTERNAL_IP" >> $GITHUB_ENV
          else
            echo "Error: External IP is empty or not found"
            exit 1
          fi

      # Step 8: Notify on success (optional)
      - name: Notify on success
        if: success() && github.event.inputs.action == 'apply'
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            ðŸŸ¢ *Created VM for Kittygram completed successfully!* ðŸŽ‰
            *Server:* ${{ env.VM_ADDRESS }}

      # Step 9: Run Destroy
      - name: Terraform Destroy
        working-directory: ./infra
        if: ${{ github.event.inputs.action == 'destroy' }}
        run: terraform destroy -auto-approve
        env:
          TF_VAR_cloud_id: ${{ secrets.YC_CLOUD_ID }}
          TF_VAR_folder_id: ${{ secrets.YC_FOLDER_ID }}
          TF_VAR_ssh_key_pub: ${{ secrets.SSH_KEY_PUB }}

      # Step 10: Run Deploy Workflow (optional)
      - name: Run Deploy Workflow
        if: success() && github.event.inputs.action == 'apply'
        run: |
          curl -X POST \
          -H "Accept: application/vnd.github.everest-preview+json" \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          https://api.github.com/repos/${{ github.repository }}/dispatches \
          -d '{"event_type": "terraform-workflow"}'