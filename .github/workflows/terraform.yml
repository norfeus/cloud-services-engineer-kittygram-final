# GitHub .github/workflows/terraform.yml
name: Terraform

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Select the Terraform action'
        required: true
        default: 'plan'
        options:
          - plan
          - apply
          - destroy

permissions:
  contents: write


jobs:
  terraform_plan:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.action == 'plan' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.8.3

      - name: Set up Yandex Cloud service account key
        working-directory: ./infra
        run: |
          echo "${{ secrets.YC_KEY_JSON }}" | base64 -d > ./authorized_key.json

      - name: Initialize Terraform
        working-directory: ./infra
        run: terraform init -backend-config="access_key=$ACCESS_KEY" -backend-config="secret_key=$SECRET_KEY"
        env:
          ACCESS_KEY: ${{ secrets.YC_ACCESS_KEY }}
          SECRET_KEY: ${{ secrets.YC_SECRET_KEY }}

      - name: Run Plan
        working-directory: ./infra
        run: terraform plan
        env:
          ACCESS_KEY: ${{ secrets.YC_ACCESS_KEY }}
          SECRET_KEY: ${{ secrets.YC_SECRET_KEY }}
          TF_VAR_cloud_id: ${{ secrets.YC_CLOUD_ID }}
          TF_VAR_folder_id: ${{ secrets.YC_FOLDER_ID }}
          TF_VAR_username: ${{ vars.VM_USER}}
          TF_VAR_ssh_key: ${{ secrets.VM_PUB_SSH_KEY}}

  terraform_destroy:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.action == 'destroy' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.8.3

      - name: Set up Yandex Cloud service account key
        working-directory: ./infra
        run: |
          echo "${{ secrets.YC_KEY_JSON }}" | base64 -d > ./authorized_key.json

      - name: Initialize Terraform
        working-directory: ./infra
        run: terraform init -backend-config="access_key=$ACCESS_KEY" -backend-config="secret_key=$SECRET_KEY"
        env:
          ACCESS_KEY: ${{ secrets.YC_ACCESS_KEY }}
          SECRET_KEY: ${{ secrets.YC_SECRET_KEY }}

      - name: Run Destroy
        working-directory: ./infra
        run: terraform destroy -auto-approve
        env:
          ACCESS_KEY: ${{ secrets.YC_ACCESS_KEY }}
          SECRET_KEY: ${{ secrets.YC_SECRET_KEY }}
          TF_VAR_cloud_id: ${{ secrets.YC_CLOUD_ID }}
          TF_VAR_folder_id: ${{ secrets.YC_FOLDER_ID }}
          TF_VAR_username: ${{ vars.VM_USER}}
          TF_VAR_ssh_key: ${{ secrets.VM_PUB_SSH_KEY}}

  terraform_apply:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.action == 'apply' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.8.3
          terraform_wrapper: false

      - name: Set up Yandex Cloud service account key
        working-directory: ./infra
        run: |
          echo "${{ secrets.YC_KEY_JSON }}" | base64 -d > ./authorized_key.json

      - name: Initialize Terraform
        working-directory: ./infra
        run: terraform init -backend-config="access_key=$ACCESS_KEY" -backend-config="secret_key=$SECRET_KEY"
        env:
          ACCESS_KEY: ${{ secrets.YC_ACCESS_KEY }}
          SECRET_KEY: ${{ secrets.YC_SECRET_KEY }}

      - name: Run Apply
        working-directory: ./infra
        env:
          ACCESS_KEY: ${{ secrets.YC_ACCESS_KEY }}
          SECRET_KEY: ${{ secrets.YC_SECRET_KEY }}
          TF_VAR_cloud_id: ${{ secrets.YC_CLOUD_ID }}
          TF_VAR_folder_id: ${{ secrets.YC_FOLDER_ID }}
          TF_VAR_username: ${{ vars.VM_USER}}
          TF_VAR_ssh_key: ${{ secrets.VM_PUB_SSH_KEY}}
        run: |
          terraform apply -auto-approve

      - name: Save External IP
        working-directory: ./infra
        run: |
          echo "VM_ADDRESS=$(terraform output -raw external_ip)" >> $GITHUB_ENV

      - name: Notify on success
        if: success()
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            ðŸŸ¢ *Created VM for Kittygram completed successfully!* ðŸŽ‰
            *Server:* ${{ env.VM_ADDRESS }}

      - name: Run Deploy Workflow
        run: |
          curl -X POST \
          -H "Accept: application/vnd.github.everest-preview+json" \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          https://api.github.com/repos/${{ github.repository }}/dispatches \
          -d '{"event_type": "terraform-workflow"}'